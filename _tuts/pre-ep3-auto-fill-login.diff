diff --git a/assets/js/components/LoginForm.vue b/assets/js/components/LoginForm.vue
index f3a4685be..2cf5a2b38 100644
--- a/assets/js/components/LoginForm.vue
+++ b/assets/js/components/LoginForm.vue
@@ -27,8 +27,8 @@
     export default {
         data() {
             return {
-                email: '',
-                password: '',
+                email: 'cheesefan@example.com',
+                password: 'cheese',
                 error: '',
                 isLoading: false
             }
diff --git a/public/build/app.js b/public/build/app.js
index e3aae3426..0957f363d 100644
--- a/public/build/app.js
+++ b/public/build/app.js
@@ -337,8 +337,8 @@ __webpack_require__.r(__webpack_exports__);
 /* harmony default export */ __webpack_exports__["default"] = ({
   data: function data() {
     return {
-      email: '',
-      password: '',
+      email: 'cheesefan@example.com',
+      password: 'cheese',
       error: '',
       isLoading: false
     };
@@ -666,4 +666,4 @@ render._withStripped = true
 /***/ })
 
 },[["./assets/js/app.js","runtime","vendors~app"]]]);
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
