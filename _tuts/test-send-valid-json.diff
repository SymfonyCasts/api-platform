diff --git a/src/ApiPlatform/Test/ApiTestAssertionsTrait.php b/src/ApiPlatform/Test/ApiTestAssertionsTrait.php
index d0ffc6f..b1d3999 100644
--- a/src/ApiPlatform/Test/ApiTestAssertionsTrait.php
+++ b/src/ApiPlatform/Test/ApiTestAssertionsTrait.php
@@ -13,9 +13,13 @@ declare(strict_types=1);
 
 namespace App\ApiPlatform\Test;
 
+use ApiPlatform\Core\Api\OperationType;
 use App\ApiPlatform\Test\Constraint\ArraySubset;
 use App\ApiPlatform\Test\Constraint\MatchesJsonSchema;
+use ApiPlatform\Core\JsonSchema\Schema;
+use ApiPlatform\Core\JsonSchema\SchemaFactoryInterface;
 use PHPUnit\Framework\ExpectationFailedException;
+use Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException;
 use Symfony\Contracts\HttpClient\ResponseInterface;
 
 /**
@@ -28,9 +32,9 @@ trait ApiTestAssertionsTrait
     use BrowserKitAssertionsTrait;
 
     /**
-     * Asserts that the retrieved JSON contains has the specified subset.
+     * Asserts that the retrieved JSON contains the specified subset.
      *
-     * This method delegates to self::assertArraySubset().
+     * This method delegates to static::assertArraySubset().
      *
      * @param array|string $subset
      *
@@ -91,18 +95,34 @@ trait ApiTestAssertionsTrait
     public static function assertArraySubset($subset, $array, bool $checkForObjectIdentity = false, string $message = ''): void
     {
         $constraint = new ArraySubset($subset, $checkForObjectIdentity);
+
         static::assertThat($array, $constraint, $message);
     }
 
     /**
-     * @param array|string $jsonSchema
+     * @param object|array|string $jsonSchema
      */
     public static function assertMatchesJsonSchema($jsonSchema, ?int $checkMode = null, string $message = ''): void
     {
         $constraint = new MatchesJsonSchema($jsonSchema, $checkMode);
+
         static::assertThat(self::getHttpResponse()->toArray(false), $constraint, $message);
     }
 
+    public static function assertMatchesResourceCollectionJsonSchema(string $resourceClass, ?string $operationName = null, string $format = 'jsonld'): void
+    {
+        $schema = self::getSchemaFactory()->buildSchema($resourceClass, $format, Schema::TYPE_OUTPUT, OperationType::COLLECTION, $operationName);
+
+        static::assertMatchesJsonSchema($schema);
+    }
+
+    public static function assertMatchesResourceItemJsonSchema(string $resourceClass, ?string $operationName = null, string $format = 'jsonld'): void
+    {
+        $schema = self::getSchemaFactory()->buildSchema($resourceClass, $format, Schema::TYPE_OUTPUT, OperationType::ITEM, $operationName);
+
+        static::assertMatchesJsonSchema($schema);
+    }
+
     private static function getHttpClient(Client $newClient = null): ?Client
     {
         static $client;
@@ -126,4 +146,16 @@ trait ApiTestAssertionsTrait
 
         return $response;
     }
-}
+
+    private static function getSchemaFactory(): SchemaFactoryInterface
+    {
+        try {
+            /** @var SchemaFactoryInterface $schemaFactory */
+            $schemaFactory = static::$container->get('api_platform.json_schema.schema_factory');
+        } catch (ServiceNotFoundException $e) {
+            throw new \LogicException('You cannot use the resource JSON Schema assertions if the "api_platform.swagger.versions" config is null or empty.');
+        }
+
+        return $schemaFactory;
+    }
+}
\ No newline at end of file
diff --git a/src/ApiPlatform/Test/ApiTestCase.php b/src/ApiPlatform/Test/ApiTestCase.php
index a99dce1..3534178 100644
--- a/src/ApiPlatform/Test/ApiTestCase.php
+++ b/src/ApiPlatform/Test/ApiTestCase.php
@@ -13,9 +13,10 @@ declare(strict_types=1);
 
 namespace App\ApiPlatform\Test;
 
-use Symfony\Bundle\FrameworkBundle\KernelBrowser;
 use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;
+use Symfony\Component\BrowserKit\AbstractBrowser;
 use Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException;
+use Symfony\Component\HttpClient\HttpClientTrait;
 
 /**
  * Base class for functional API tests.
@@ -28,9 +29,13 @@ abstract class ApiTestCase extends KernelTestCase
 {
     use ApiTestAssertionsTrait;
 
-    protected function doTearDown(): void
+    /**
+     * {@inheritdoc}
+     */
+    protected function tearDown(): void
     {
-        parent::doTearDown();
+        parent::tearDown();
+
         self::getClient(null);
     }
 
@@ -50,10 +55,11 @@ abstract class ApiTestCase extends KernelTestCase
              */
             $client = $kernel->getContainer()->get('test.api_platform.client');
         } catch (ServiceNotFoundException $e) {
-            if (class_exists(KernelBrowser::class)) {
-                throw new \LogicException('You cannot create the client used in functional tests if the "framework.test" config is not set to true.');
+            if (!class_exists(AbstractBrowser::class) || !trait_exists(HttpClientTrait::class)) {
+                throw new \LogicException('You cannot create the client used in functional tests if the BrowserKit and HttpClient components are not available. Try running "composer require --dev symfony/browser-kit symfony/http-client".');
             }
-            throw new \LogicException('You cannot create the client used in functional tests if the BrowserKit component is not available. Try running "composer require symfony/browser-kit".');
+
+            throw new \LogicException('You cannot create the client used in functional tests if the "framework.test" config is not set to true.');
         }
 
         $client->setDefaultOptions($defaultOptions);
@@ -63,4 +69,34 @@ abstract class ApiTestCase extends KernelTestCase
 
         return $client;
     }
-}
+
+    /**
+     * Finds the IRI of a resource item macthing the resource class and the specified criteria.
+     */
+    protected function findIriBy(string $resourceClass, array $criteria): ?string
+    {
+        if (null === static::$container) {
+            throw new \RuntimeException(sprintf('The container is not available. You must call "bootKernel()" or "createClient()" before calling "%s".', __METHOD__));
+        }
+
+        if (
+            (
+                !static::$container->has('doctrine') ||
+                null === $objectManager = static::$container->get('doctrine')->getManagerForClass($resourceClass)
+            ) &&
+            (
+                !static::$container->has('doctrine_mongodb') ||
+                null === $objectManager = static::$container->get('doctrine_mongodb')->getManagerForClass($resourceClass)
+            )
+        ) {
+            throw new \RuntimeException(sprintf('"%s" only supports classes managed by Doctrine ORM or Doctrine MongoDB ODM. Override this method to implement your own retrieval logic if you don\'t use those libraries.', __METHOD__));
+        }
+
+        $item = $objectManager->getRepository($resourceClass)->findOneBy($criteria);
+        if (null === $item) {
+            return null;
+        }
+
+        return static::$container->get('api_platform.iri_converter')->getIriFromItem($item);
+    }
+}
\ No newline at end of file
diff --git a/src/ApiPlatform/Test/BrowserKitAssertionsTrait.php b/src/ApiPlatform/Test/BrowserKitAssertionsTrait.php
index 9a23676..3fecdaf 100644
--- a/src/ApiPlatform/Test/BrowserKitAssertionsTrait.php
+++ b/src/ApiPlatform/Test/BrowserKitAssertionsTrait.php
@@ -167,4 +167,4 @@ trait BrowserKitAssertionsTrait
 
         return $request;
     }
-}
+}
\ No newline at end of file
diff --git a/src/ApiPlatform/Test/Client.php b/src/ApiPlatform/Test/Client.php
index 70eed34..aa9438e 100644
--- a/src/ApiPlatform/Test/Client.php
+++ b/src/ApiPlatform/Test/Client.php
@@ -89,10 +89,10 @@ final class Client implements HttpClientInterface
         $basic = $options['auth_basic'] ?? null;
         [$url, $options] = self::prepareRequest($method, $url, $options, $this->defaultOptions);
         $resolvedUrl = implode('', $url);
-
         $server = [];
+
         // Convert headers to a $_SERVER-like array
-        foreach ($options['headers'] as $key => $value) {
+        foreach (self::extractHeaders($options) as $key => $value) {
             if ('content-type' === $key) {
                 $server['CONTENT_TYPE'] = $value[0] ?? '';
 
@@ -212,4 +212,28 @@ final class Client implements HttpClientInterface
     {
         $this->kernelBrowser->enableReboot();
     }
-}
+
+    /**
+     * Extracts headers depending on the symfony/http-client version being used.
+     *
+     * @return array<string, string[]>
+     */
+    private static function extractHeaders(array $options): array
+    {
+        if (!isset($options['normalized_headers'])) {
+            return $options['headers'];
+        }
+
+        $headers = [];
+
+        /** @var string $key */
+        foreach ($options['normalized_headers'] as $key => $values) {
+            foreach ($values as $value) {
+                [, $value] = explode(': ', $value, 2);
+                $headers[$key][] = $value;
+            }
+        }
+
+        return $headers;
+    }
+}
\ No newline at end of file
diff --git a/src/ApiPlatform/Test/Constraint/ArraySubset.php b/src/ApiPlatform/Test/Constraint/ArraySubset.php
index 55886a2..980427a 100644
--- a/src/ApiPlatform/Test/Constraint/ArraySubset.php
+++ b/src/ApiPlatform/Test/Constraint/ArraySubset.php
@@ -126,4 +126,4 @@ final class ArraySubset extends Constraint
         // Keep BC even if we know that array would not be the expected one
         return (array) $other;
     }
-}
+}
\ No newline at end of file
diff --git a/src/ApiPlatform/Test/Constraint/MatchesJsonSchema.php b/src/ApiPlatform/Test/Constraint/MatchesJsonSchema.php
index 26585de..3d98f69 100644
--- a/src/ApiPlatform/Test/Constraint/MatchesJsonSchema.php
+++ b/src/ApiPlatform/Test/Constraint/MatchesJsonSchema.php
@@ -25,16 +25,19 @@ use PHPUnit\Framework\Constraint\Constraint;
  */
 final class MatchesJsonSchema extends Constraint
 {
+    /**
+     * @var object|array
+     */
     private $schema;
     private $checkMode;
 
     /**
-     * @param array|string $schema
+     * @param object|array|string $schema
      */
     public function __construct($schema, ?int $checkMode = null)
     {
+        $this->schema = \is_string($schema) ? json_decode($schema) : $schema;
         $this->checkMode = $checkMode;
-        $this->schema = \is_array($schema) ? (object) $schema : json_decode($schema);
     }
 
     /**
@@ -46,15 +49,15 @@ final class MatchesJsonSchema extends Constraint
     }
 
     /**
-     * @param array $other
+     * {@inheritdoc}
      */
     protected function matches($other): bool
     {
         if (!class_exists(Validator::class)) {
-            throw new \RuntimeException('The "justinrainbow/json-schema" library must be installed to use "assertMatchesJsonSchema()". Try running "composer require --dev justinrainbow/json-schema".');
+            throw new \LogicException('The "justinrainbow/json-schema" library must be installed to use "assertMatchesJsonSchema()". Try running "composer require --dev justinrainbow/json-schema".');
         }
 
-        $other = (object) $other;
+        $other = $this->normalizeJson($other);
 
         $validator = new Validator();
         $validator->validate($other, $this->schema, $this->checkMode);
@@ -63,14 +66,14 @@ final class MatchesJsonSchema extends Constraint
     }
 
     /**
-     * @param object $other
+     * {@inheritdoc}
      */
     protected function additionalFailureDescription($other): string
     {
-        $other = (object) $other;
+        $other = $this->normalizeJson($other);
 
         $validator = new Validator();
-        $validator->check($other, $this->schema);
+        $validator->validate($other, $this->schema, $this->checkMode);
 
         $errors = [];
         foreach ($validator->getErrors() as $error) {
@@ -80,4 +83,32 @@ final class MatchesJsonSchema extends Constraint
 
         return implode("\n", $errors);
     }
-}
+
+    /**
+     * Normalizes a JSON document.
+     *
+     * Specifically, we should ensure that:
+     * 1. a JSON object is represented as a PHP object, not as an associative array.
+     */
+    private function normalizeJson($document)
+    {
+        if (is_scalar($document) || \is_object($document)) {
+            return $document;
+        }
+
+        if (!\is_array($document)) {
+            throw new \InvalidArgumentException('Document must be scalar, array or object.');
+        }
+
+        $document = json_encode($document);
+        if (!\is_string($document)) {
+            throw new \UnexpectedValueException('JSON encode failed.');
+        }
+        $document = json_decode($document);
+        if (!\is_array($document) && !\is_object($document)) {
+            throw new \UnexpectedValueException('JSON decode failed.');
+        }
+
+        return $document;
+    }
+}
\ No newline at end of file
diff --git a/src/ApiPlatform/Test/Response.php b/src/ApiPlatform/Test/Response.php
index 05a8176..f2dee2d 100644
--- a/src/ApiPlatform/Test/Response.php
+++ b/src/ApiPlatform/Test/Response.php
@@ -55,7 +55,7 @@ final class Response implements ResponseInterface
             }
         }
 
-        $this->content = $httpFoundationResponse->getContent();
+        $this->content = (string) $httpFoundationResponse->getContent();
         $this->info = [
             'http_code' => $httpFoundationResponse->getStatusCode(),
             'error' => null,
@@ -184,4 +184,4 @@ final class Response implements ResponseInterface
     {
         $this->info['error'] = 'Response has been canceled.';
     }
-}
+}
\ No newline at end of file
diff --git a/tests/Functional/CheeseListingResourceTest.php b/tests/Functional/CheeseListingResourceTest.php
index 0726445..ad32e91 100644
--- a/tests/Functional/CheeseListingResourceTest.php
+++ b/tests/Functional/CheeseListingResourceTest.php
@@ -10,7 +10,8 @@ class CheeseListingResourceTest extends ApiTestCase
     {
         $client = self::createClient();
         $client->request('POST', '/api/cheeses', [
-            'headers' => ['Content-Type' => 'application/json']
+            'headers' => ['Content-Type' => 'application/json'],
+            'json' => [],
         ]);
         $this->assertResponseStatusCodeSame(401);
     }
