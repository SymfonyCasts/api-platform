WEBVTT

00:00:01.026 --> 00:00:04.866 align:middle
He aquí una cuestión interesante:
si recuperamos un solo CheeseListing,

00:00:06.066 --> 00:00:09.496 align:middle
podemos ver que el username
aparece en la propiedad owner.

00:00:10.126 --> 00:00:13.836 align:middle
Y, obviamente, si nosotros,
editamos un CheeseListing concreto,

00:00:14.266 --> 00:00:17.646 align:middle
podemos cambiar totalmente el
propietario por otro distinto.

00:00:19.126 --> 00:00:27.296 align:middle
Vamos a probarlo: pongamos
owner en /api/users/2.

00:00:28.426 --> 00:00:29.836 align:middle
Ejecuta y...

00:00:30.276 --> 00:00:31.706 align:middle
¡sí! ¡Se ha actualizado!

00:00:32.176 --> 00:00:37.376 align:middle
Eso es genial, y funciona más o menos
como una propiedad escalar normal.

00:00:37.936 --> 00:00:41.646 align:middle
Pero... mirando los resultados
de la operación GET...

00:00:44.126 --> 00:00:49.586 align:middle
aquí está, si podemos leer la propiedad
username del propietario relacionado,

00:00:49.966 --> 00:00:52.756 align:middle
en lugar de cambiar el
propietario por completo,

00:00:53.076 --> 00:00:58.356 align:middle
¿podríamos actualizar el nombre de usuario del propietario
actual mientras se actualiza un CheeseListing? Es

00:00:59.336 --> 00:01:05.196 align:middle
un ejemplo un poco raro, pero la edición de datos
a través de una relación incrustada es posible...

00:01:05.456 --> 00:01:11.606 align:middle
y, como mínimo, es una forma estupenda de
entender realmente cómo funciona el serializador.

00:01:12.986 --> 00:01:13.456 align:middle
En fin...

00:01:13.616 --> 00:01:15.606 align:middle
¡vamos a probarlo!

00:01:15.606 --> 00:01:19.906 align:middle
En lugar de establecer el propietario
a un IRI, establécelo a un objeto

00:01:23.776 --> 00:01:27.106 align:middle
e intenta actualizar el
username a cultured_cheese_head.

00:01:29.456 --> 00:01:30.246 align:middle
¡Vamos, vamos, vamos!

00:01:30.406 --> 00:01:36.906 align:middle
Y... no funciona: Los documentos anidados
para el atributo "owner" no están permitidos.

00:01:37.146 --> 00:01:39.156 align:middle
Utiliza en su lugar IRIs.

00:01:39.906 --> 00:01:42.506 align:middle
Entonces... ¿es esto posible, o no?

00:01:43.536 --> 00:01:49.426 align:middle
Bueno, la razón por la que username se
incrusta al serializar un CheeseListing es que,

00:01:49.726 --> 00:01:54.906 align:middle
por encima de username, hemos añadido
el grupo cheese_listing:item:get,

00:01:55.606 --> 00:01:59.946 align:middle
que es uno de los grupos que se utilizan
en la operación "obtener" el elemento.

00:02:01.236 --> 00:02:05.866 align:middle
La misma lógica se utiliza cuando se
escribe un campo, o se desnormaliza.

00:02:06.196 --> 00:02:10.126 align:middle
Si queremos que username se pueda escribir
mientras se desnormaliza un CheeseListing,

00:02:10.446 --> 00:02:14.746 align:middle
tenemos que ponerlo en un grupo que se
utilice durante la desnormalización.

00:02:14.746 --> 00:02:20.456 align:middle
En este caso, es cheese_listing:write.

00:02:21.766 --> 00:02:23.756 align:middle
Cópialo y pégalo encima de username. En

00:02:24.916 --> 00:02:29.626 align:middle
cuanto lo hagamos -porque la propiedad
owner ya tiene este grupo- ¡se

00:02:30.046 --> 00:02:33.356 align:middle
podrá escribir la propiedad
username incrustada!

00:02:34.246 --> 00:02:40.456 align:middle
Volvamos a intentarlo: seguimos
intentando pasar un objeto con username.

00:02:41.816 --> 00:02:44.936 align:middle
¡Ejecuta! Y...

00:02:45.116 --> 00:02:47.116 align:middle
oh... ¡sigue sin funcionar!

00:02:47.646 --> 00:02:49.456 align:middle
¡Pero el error es fascinante!

00:02:50.166 --> 00:02:57.066 align:middle
Se ha encontrado una nueva entidad a través de la
relación CheeseListing.owner que no estaba configurada

00:02:57.066 --> 00:03:00.616 align:middle
para realizar operaciones de persistencia
en cascada para la entidad Usuario.

00:03:00.616 --> 00:03:05.096 align:middle
Si llevas un tiempo en Doctrine, puede
que reconozcas este extraño error.

00:03:05.966 --> 00:03:08.556 align:middle
Ignorando la Plataforma API por un momento,

00:03:08.746 --> 00:03:12.736 align:middle
significa que algo creó un
objeto User totalmente nuevo,

00:03:13.036 --> 00:03:18.256 align:middle
lo estableció en la propiedad
CheeseListing.owner y luego intentó guardar.

00:03:19.206 --> 00:03:22.716 align:middle
Pero como nadie llamó a
$entityManager->persist()

00:03:22.716 --> 00:03:25.446 align:middle
en el nuevo objeto User,
¡Doctrine entró en pánico!

00:03:26.846 --> 00:03:28.016 align:middle
Así que... ¡sí! ¡

00:03:28.436 --> 00:03:35.216 align:middle
En lugar de consultar el propietario existente y
actualizarlo, la Plataforma API tomó nuestros datos

00:03:35.506 --> 00:03:39.156 align:middle
y los utilizó para crear un
objeto User totalmente nuevo!

00:03:40.146 --> 00:03:41.806 align:middle
¡Eso no es en absoluto lo que queríamos!

00:03:42.656 --> 00:03:46.276 align:middle
¿Cómo podemos decirle que actualice el
objeto User existente en su lugar? Aquí está

00:03:47.256 --> 00:03:55.656 align:middle
la respuesta, o en realidad, aquí está la regla
simple: si enviamos una matriz de datos, o en realidad,

00:03:55.846 --> 00:04:03.026 align:middle
un "objeto" en JSON, la Plataforma API asume
que se trata de un nuevo objeto y entonces...

00:04:03.226 --> 00:04:04.516 align:middle
crea un nuevo objeto.

00:04:04.656 --> 00:04:08.216 align:middle
Si quieres indicar que, en cambio, quieres

00:04:08.216 --> 00:04:13.116 align:middle
actualizar un objeto existente, sólo
tienes que añadir la propiedad @id.

00:04:14.456 --> 00:04:17.786 align:middle
Establécela como /api/users/2.

00:04:19.086 --> 00:04:23.756 align:middle
Gracias a esto, la Plataforma API
consultará ese usuario y lo modificará.

00:04:24.566 --> 00:04:27.156 align:middle
Vamos a probarlo de nuevo.

00:04:27.156 --> 00:04:28.856 align:middle
¡Funciona! Bueno...

00:04:28.976 --> 00:04:33.756 align:middle
probablemente ha funcionado: parece que ha tenido
éxito, pero no podemos ver el nombre de usuario aquí.

00:04:34.876 --> 00:04:38.246 align:middle
Desplázate hacia abajo y
busca el usuario con id 2.

00:04:40.296 --> 00:04:41.236 align:middle
¡Ahí está!

00:04:41.376 --> 00:04:44.386 align:middle
Así que ahora sabemos que, al actualizar...

00:04:44.386 --> 00:04:45.886 align:middle
o realmente al crear...

00:04:45.886 --> 00:04:51.766 align:middle
un CheeseListing, podemos enviar datos incrustados
de owner y señalar a la Plataforma API

00:04:51.766 --> 00:04:55.856 align:middle
que debe actualizar un owner existente
a través de la propiedad @id.

00:04:56.706 --> 00:05:01.596 align:middle
Y cuando no añadimos @id, intenta
crear un nuevo objeto User...

00:05:01.886 --> 00:05:04.566 align:middle
lo que no funciona debido a
ese error de persistencia.

00:05:04.566 --> 00:05:09.316 align:middle
Pero, podemos arreglar totalmente ese
problema con un persist en cascada...

00:05:09.696 --> 00:05:12.306 align:middle
que mostraré dentro de unos minutos
para resolver un problema diferente.

00:05:12.906 --> 00:05:13.396 align:middle
Así que espera...

00:05:13.816 --> 00:05:21.666 align:middle
¿significa esto que, en teoría, podríamos crear
un nuevo User mientras editamos un CheeseListing?

00:05:22.136 --> 00:05:22.846 align:middle
La respuesta es....

00:05:23.196 --> 00:05:24.606 align:middle
¡sí! Bueno...

00:05:24.916 --> 00:05:31.096 align:middle
casi. Hay dos cosas que lo impiden ahora mismo:
primero, la falta de persistencia de la cascada,

00:05:31.536 --> 00:05:33.566 align:middle
que nos dio ese gran error de Doctrine.

00:05:34.086 --> 00:05:39.726 align:middle
Y en segundo lugar, en User, también tendríamos
que exponer los campos $password y $email

00:05:39.906 --> 00:05:42.416 align:middle
porque ambos son necesarios
en la base de datos.

00:05:43.566 --> 00:05:47.956 align:middle
Cuando empiezas a hacer que las cosas incrustadas se
puedan escribir, sinceramente se añade complejidad.

00:05:48.586 --> 00:05:52.816 align:middle
Asegúrate de llevar un registro de lo que
es posible y lo que no es posible en tu API.

00:05:53.666 --> 00:05:57.576 align:middle
No quiero que se creen usuarios
accidentalmente al actualizar un CheeseListing,

00:05:57.696 --> 00:05:58.986 align:middle
así que esto es perfecto.

00:05:59.876 --> 00:06:02.646 align:middle
Pero queda una cosa rara.

00:06:03.756 --> 00:06:05.836 align:middle
Establece username como una cadena vacía.

00:06:06.866 --> 00:06:10.616 align:middle
Eso no debería funcionar porque tenemos
un @NotBlank() por encima de $username.

00:06:12.006 --> 00:06:13.386 align:middle
Intenta actualizar de todos modos.

00:06:15.196 --> 00:06:16.276 align:middle
Por supuesto

00:06:16.326 --> 00:06:21.226 align:middle
Me sale el error 500 en cascada -
déjame volver a poner la propiedad @id.

00:06:25.696 --> 00:06:26.296 align:middle
Inténtalo de nuevo.

00:06:27.726 --> 00:06:30.116 align:middle
¡Woh! ¡Un código de estado 200!

00:06:30.276 --> 00:06:31.526 align:middle
¡Parece que ha funcionado!

00:06:32.646 --> 00:06:34.076 align:middle
Baja y recupera este usuario...

00:06:34.236 --> 00:06:36.746 align:middle
con id=2.

00:06:36.776 --> 00:06:38.786 align:middle
¡No tiene nombre de usuario!

00:06:39.166 --> 00:06:41.246 align:middle
¡No te preocupes! Esto...

00:06:41.246 --> 00:06:43.026 align:middle
es un poco de gotcha.

00:06:45.466 --> 00:06:51.356 align:middle
Cuando modificamos el CheeseListing, se ejecutan
las reglas de validación @Assert\NotBlank(),

00:06:51.356 --> 00:06:58.196 align:middle
@Assert\Length(), etc. Pero cuando el
validador ve el objeto owner incrustado,

00:06:58.756 --> 00:07:03.166 align:middle
no continúa hacia abajo en
ese objeto para validarlo.

00:07:03.736 --> 00:07:10.346 align:middle
Eso es normalmente lo que queremos: si sólo estábamos actualizando
un CheeseListing, ¿por qué debería intentar validar también

00:07:10.346 --> 00:07:14.576 align:middle
un objeto User relacionado que
ni siquiera hemos modificado?

00:07:15.886 --> 00:07:16.506 align:middle
No debería

00:07:16.506 --> 00:07:23.666 align:middle
Pero cuando haces actualizaciones de objetos incrustados
como nosotros, eso cambia: sí queremos que la validación

00:07:23.666 --> 00:07:25.496 align:middle
continúe hasta este objeto.

00:07:26.516 --> 00:07:31.246 align:middle
Para forzar eso, encima de la propiedad
owner, añade @Assert\Valid().

00:07:32.556 --> 00:07:34.606 align:middle
Bien, vuelve atrás y...

00:07:34.606 --> 00:07:36.316 align:middle
intenta de nuevo nuestra ruta de edición.

00:07:36.846 --> 00:07:41.146 align:middle
Ejecuta. Ya está

00:07:41.936 --> 00:07:45.896 align:middle
owner.username: Este valor no
debe estar en blanco ¡Bien!

00:07:46.726 --> 00:07:48.756 align:middle
Volvamos a darle un nombre
de usuario válido...

00:07:49.186 --> 00:07:52.406 align:middle
para que no tengamos un usuario
malo en nuestra base de datos.

00:07:52.736 --> 00:07:58.406 align:middle
¡Perfecto! Poder hacer modificaciones en las
propiedades incrustadas es bastante chulo...

00:07:58.616 --> 00:08:00.646 align:middle
pero añade complejidad.

00:08:01.156 --> 00:08:05.506 align:middle
Hazlo si lo necesitas, pero recuerda también
que podemos actualizar un CheeseListing

00:08:05.506 --> 00:08:10.176 align:middle
y un User de forma más sencilla
haciendo dos peticiones a dos rutas.

00:08:11.456 --> 00:08:17.516 align:middle
A continuación, vamos a ponernos aún más locos y a hablar de
la actualización de colecciones: ¿qué ocurre si empezamos a

00:08:17.516 --> 00:08:21.366 align:middle
intentar modificar la propiedad
cheeseListings directamente en un User?
