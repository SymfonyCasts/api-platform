WEBVTT

00:00:01.036 --> 00:00:06.346 align:middle
Busca en Google el serializador Symfony y encuentra
una página llamada El componente serializador.

00:00:07.676 --> 00:00:10.386 align:middle
La Plataforma API está construida
sobre los componentes Symfony.

00:00:10.676 --> 00:00:16.286 align:middle
Y todo el proceso de cómo convierte
nuestro objeto CheeseListing en JSON...

00:00:16.556 --> 00:00:22.246 align:middle
¡y JSON de nuevo en un objeto CheeseListing,
lo hace el Serializador de Symfony!

00:00:23.036 --> 00:00:26.446 align:middle
Si entendemos cómo funciona,
¡estamos en el negocio!

00:00:26.866 --> 00:00:30.376 align:middle
Y, al menos en la superficie,
es maravillosamente sencillo.

00:00:31.376 --> 00:00:33.596 align:middle
Mira el diagrama que muestra cómo funciona.

00:00:34.456 --> 00:00:39.696 align:middle
Pasar de un objeto a JSON se
llama serialización, y de JSON

00:00:39.696 --> 00:00:42.616 align:middle
a un objeto se llama deserialización.

00:00:43.816 --> 00:00:48.796 align:middle
Para ello, internamente, pasa por
un proceso llamado normalización:

00:00:49.346 --> 00:00:53.226 align:middle
primero toma tu objeto y
lo convierte en una matriz.

00:00:53.606 --> 00:00:57.536 align:middle
Y luego lo codifica en JSON
o en el formato que sea.

00:00:58.236 --> 00:01:02.696 align:middle
En realidad, hay un montón de clases
"normalizadoras" diferentes que ayudan en esta tarea,

00:01:03.126 --> 00:01:08.276 align:middle
como una que es muy buena para convertir los
objetos de DateTime en una cadena y viceversa.

00:01:08.806 --> 00:01:15.226 align:middle
Pero la clase principal -la que está en el
centro de este proceso- se llama ObjectNormalizer.

00:01:15.946 --> 00:01:20.306 align:middle
Entre bastidores, utiliza otro componente
de Symfony llamado PropertyAccess,

00:01:20.346 --> 00:01:25.726 align:middle
que tiene un superpoder: si le das un nombre
de propiedad, como title, es realmente bueno

00:01:26.086 --> 00:01:31.576 align:middle
encontrando y utilizando métodos getter
y setter para acceder a esa propiedad. En

00:01:32.226 --> 00:01:37.476 align:middle
otras palabras, cuando la plataforma API
intenta "normalizar" un objeto en una matriz,

00:01:37.816 --> 00:01:40.966 align:middle
¡utiliza los métodos
getter y setter para hacerlo!

00:01:40.966 --> 00:01:46.336 align:middle
Por ejemplo, ve que hay un
método getId(), y así,

00:01:46.646 --> 00:01:50.216 align:middle
lo convierte en una clave id en el array...

00:01:50.426 --> 00:01:52.086 align:middle
y finalmente en el JSON.

00:01:52.826 --> 00:01:56.396 align:middle
Hace lo mismo con getTitle()
- que se convierte en title.

00:01:56.896 --> 00:01:58.296 align:middle
¡Es así de sencillo!

00:01:59.356 --> 00:02:01.926 align:middle
Cuando enviamos datos, ¡hace lo mismo!

00:02:02.786 --> 00:02:08.026 align:middle
Como tenemos un método setTitle(),
podemos enviar JSON con una clave title.

00:02:08.986 --> 00:02:14.206 align:middle
El normalizador tomará el valor que enviamos,
llamará a setTitle() ¡y lo pasará! Es

00:02:15.036 --> 00:02:21.236 align:middle
una forma sencilla, pero muy útil, de permitir que
tus clientes de la API interactúen con tu objeto,

00:02:21.586 --> 00:02:25.736 align:middle
tu recurso de la API, utilizando
sus métodos getter y setter. Por

00:02:26.616 --> 00:02:32.566 align:middle
cierto, el componente PropertyAccess también
admite propiedades públicas, hassers, issers,

00:02:32.876 --> 00:02:37.936 align:middle
adders, removers - básicamente un montón de
convenciones de nomenclatura de métodos comunes

00:02:38.156 --> 00:02:39.706 align:middle
, además de getters y setters.

00:02:40.676 --> 00:02:44.996 align:middle
De todos modos, ahora que sabemos cómo
funciona esto, ¡somos súper peligrosos!

00:02:45.166 --> 00:02:45.856 align:middle
¡En serio!

00:02:46.576 --> 00:02:49.636 align:middle
Ahora mismo, podemos enviar
un campo description.

00:02:50.456 --> 00:02:54.586 align:middle
Imaginemos que esta propiedad puede
contener HTML en la base de datos.

00:02:55.046 --> 00:02:59.416 align:middle
Pero la mayoría de nuestros usuarios no
entienden realmente el HTML y, en su lugar,

00:02:59.416 --> 00:03:01.666 align:middle
se limitan a escribir en un
cuadro con saltos de línea.

00:03:02.596 --> 00:03:06.236 align:middle
Vamos a crear un nuevo campo
personalizado llamado textDescription.

00:03:07.176 --> 00:03:12.516 align:middle
Si un cliente de la API envía un campo
textDescription, convertiremos las nuevas líneas

00:03:12.596 --> 00:03:16.736 align:middle
en saltos de línea HTML antes de
guardarlo en la propiedad description.

00:03:17.706 --> 00:03:22.426 align:middle
¿Cómo podemos crear un campo de entrada totalmente
nuevo y personalizado para nuestro recurso?

00:03:22.426 --> 00:03:28.606 align:middle
Busca setDescription(), duplícalo
y llámalo setTextDescription().

00:03:31.606 --> 00:03:36.486 align:middle
Dentro de, por ejemplo, $this->description
= nl2br($description);. Es

00:03:37.346 --> 00:03:43.306 align:middle
un ejemplo tonto, pero incluso olvidando la
Plataforma API, esto es una buena y aburrida

00:03:43.306 --> 00:03:47.626 align:middle
codificación orientada a objetos: hemos
añadido una forma de establecer la descripción

00:03:47.886 --> 00:03:50.786 align:middle
si quieres que las nuevas líneas
se conviertan en saltos de línea.

00:03:51.446 --> 00:03:56.426 align:middle
Pero ahora, actualiza y abre
de nuevo la operación POST.

00:03:57.496 --> 00:04:01.466 align:middle
¡Vaya! ¡ Dice que todavía
podemos enviar un campo description,

00:04:01.776 --> 00:04:04.616 align:middle
pero también podemos pasar textDescription!

00:04:05.566 --> 00:04:07.636 align:middle
Pero si intentas la operación GET...

00:04:09.636 --> 00:04:12.296 align:middle
seguimos obteniendo sólo description.

00:04:12.926 --> 00:04:13.696 align:middle
¡Eso tiene sentido!

00:04:14.236 --> 00:04:18.586 align:middle
Hemos añadido un método setter
-que permite enviar este campo-

00:04:18.916 --> 00:04:21.366 align:middle
pero no hemos añadido un método getter.

00:04:22.246 --> 00:04:25.696 align:middle
También puedes ver el nuevo campo
descrito abajo en la sección de modelos.

00:04:26.146 --> 00:04:32.456 align:middle
Pero, probablemente no queramos permitir que el
usuario envíe tanto description como textDescription.

00:04:33.356 --> 00:04:38.286 align:middle
Es decir, se podría, pero es un poco raro: si
el cliente enviara ambos, chocarían entre sí

00:04:38.646 --> 00:04:42.356 align:middle
y la última clave ganaría

00:04:42.536 --> 00:04:45.096 align:middle
porque su método setter sería
llamado en último lugar.

00:04:45.506 --> 00:04:48.396 align:middle
Así que vamos a eliminar setDescription().

00:04:52.936 --> 00:04:53.726 align:middle
Actualiza ahora.

00:04:57.306 --> 00:04:58.346 align:middle
¡Me encanta!

00:04:59.076 --> 00:05:03.906 align:middle
Para crear o actualizar un listado de
quesos, el cliente enviará textDescription.

00:05:03.906 --> 00:05:09.176 align:middle
Pero cuando recojan los datos, siempre
recibirán de vuelta description.

00:05:09.976 --> 00:05:11.726 align:middle
De hecho, vamos a probarlo...

00:05:11.726 --> 00:05:13.346 align:middle
con el id 1.

00:05:15.076 --> 00:05:23.636 align:middle
Abre la operación PUT y pon en textDescription
algo con algunos saltos de línea.

00:05:26.176 --> 00:05:30.986 align:middle
Sólo quiero actualizar este campo, así
que podemos eliminar los demás campos.

00:05:36.076 --> 00:05:37.446 align:middle
Y... ¡a ejecutar!

00:05:39.306 --> 00:05:41.126 align:middle
código de estado 200 y...

00:05:41.466 --> 00:05:44.016 align:middle
¡un campo description con
algunos saltos de línea!

00:05:44.736 --> 00:05:51.006 align:middle
Por cierto, el hecho de que nuestros campos de entrada
no coincidan con los de salida está totalmente bien.

00:05:51.746 --> 00:05:57.526 align:middle
La coherencia está muy bien, y pronto te
mostraré cómo podemos arreglar esta incoherencia.

00:05:58.146 --> 00:06:02.306 align:middle
Pero no hay ninguna regla que diga que tus datos
de entrada tienen que coincidir con los de salida.

00:06:03.116 --> 00:06:04.716 align:middle
Bien, ¿qué más podemos hacer?

00:06:05.706 --> 00:06:11.626 align:middle
Bueno, tener un campo createdAt en la salida es
estupendo, pero probablemente no tenga sentido

00:06:11.626 --> 00:06:16.166 align:middle
permitir que el cliente lo envíe: el servidor
debería establecerlo automáticamente.

00:06:16.916 --> 00:06:17.546 align:middle
¡No hay problema!

00:06:18.116 --> 00:06:20.926 align:middle
¿No quieres que se permita el
campo createdAt en la entrada?

00:06:20.926 --> 00:06:24.196 align:middle
Busca el método setCreatedAt() y elimínalo.

00:06:25.616 --> 00:06:30.426 align:middle
Para autoconfigurarlo, vuelve a la buena y
antigua programación orientada a objetos.

00:06:31.256 --> 00:06:39.746 align:middle
Añade public function __construct() y, dentro,
$this->createdAt = new \DateTimeImmutable().

00:06:42.046 --> 00:06:43.086 align:middle
Ve a actualizar los documentos.

00:06:46.736 --> 00:06:48.106 align:middle
Sí, ya no está aquí...

00:06:49.486 --> 00:06:56.706 align:middle
pero cuando intentamos la operación
GET, sigue estando en la salida.

00:06:57.646 --> 00:06:58.636 align:middle
¡Estamos de enhorabuena!

00:06:59.066 --> 00:07:01.186 align:middle
¡Así que vamos a personalizar una cosa más!

00:07:02.096 --> 00:07:07.196 align:middle
Digamos que, además del campo createdAt
-que está en este formato feo,

00:07:07.196 --> 00:07:12.296 align:middle
pero estándar-, también queremos
devolver la fecha como una cadena,

00:07:12.676 --> 00:07:15.936 align:middle
algo así como 5 minutes ago o 1 month ago.

00:07:16.036 --> 00:07:19.286 align:middle
Para ayudarnos a hacerlo,
busca tu terminal y ejecuta

00:07:19.576 --> 00:07:25.446 align:middle
composer require nesbot/carbon Esta
es una práctica utilidad de DateTime

00:07:25.646 --> 00:07:27.506 align:middle
que puede darnos fácilmente esa cadena.

00:07:28.706 --> 00:07:32.376 align:middle
Ah, mientras esto se instala, volveré
a la parte superior de mi entidad

00:07:32.426 --> 00:07:35.316 align:middle
y eliminaré el path personalizado
en la operación get.

00:07:36.386 --> 00:07:37.926 align:middle
Es un ejemplo genial...

00:07:37.926 --> 00:07:41.486 align:middle
pero no hagamos rara nuestra API sin motivo.

00:07:41.486 --> 00:07:44.106 align:middle
Sí, eso se ve mejor.

00:07:45.096 --> 00:07:46.036 align:middle
De vuelta a la terminal....

00:07:48.076 --> 00:07:53.666 align:middle
¡hecho! En CheeseListing, busca
getCreatedAt(), pasa por debajo,

00:07:54.306 --> 00:08:00.466 align:middle
y añade public function getCreatedAtAgo()
con un tipo de retorno string.

00:08:01.246 --> 00:08:01.606 align:middle
Luego,

00:08:01.866 --> 00:08:10.126 align:middle
return
Carbon::instance($this->getCreatedAt())->diffForHumans().

00:08:11.496 --> 00:08:16.326 align:middle
Ya sabes lo que hay que hacer: con sólo
añadir un getter, cuando actualizamos... y

00:08:16.406 --> 00:08:25.676 align:middle
miramos el modelo, tenemos un nuevo
createdAtAgo - ¡campo de sólo lectura! Y,

00:08:26.216 --> 00:08:31.846 align:middle
por cierto, también sabe que description es de sólo
lectura porque no tiene ningún setter. Desplázate

00:08:32.946 --> 00:08:35.666 align:middle
hacia arriba y prueba la
operación de recogida GET. Y...

00:08:37.036 --> 00:08:41.326 align:middle
genial: createdAt y createdAtAgo. Por

00:08:42.536 --> 00:08:45.876 align:middle
muy bonito que sea controlar las cosas
simplemente ajustando tus métodos getter y

00:08:45.876 --> 00:08:48.296 align:middle
setter, no es lo ideal. Por

00:08:48.296 --> 00:08:54.016 align:middle
ejemplo, para evitar que un cliente de
la API establezca el campo createdAt,

00:08:54.416 --> 00:08:57.866 align:middle
tuvimos que eliminar el
método setCreatedAt(). Pero,

00:08:57.866 --> 00:09:03.896 align:middle
¿qué pasa si, en algún lugar de mi aplicación -como
un comando que importa listados de queso heredados-

00:09:04.256 --> 00:09:07.906 align:middle
necesitamos establecer manualmente
la fecha createdAt? Vamos a

00:09:08.646 --> 00:09:12.136 align:middle
aprender a controlar esto con
los grupos de serialización
